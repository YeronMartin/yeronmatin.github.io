{"ast":null,"code":"var _jsxFileName = \"/Users/yeronmartin/Desktop/web/src/components/CitiesList.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { checkWeather } from '../js/watherScript';\nimport { CityCard } from './CityCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CitiesList = props => {\n  _s();\n  const [currentId, setCurrentId] = useState(2);\n  const [cityList, setCityList] = useState([{\n    city: 'Madrid',\n    temp: '38',\n    id: 0\n  }, {\n    city: 'London',\n    temp: '11',\n    id: 1\n  }]);\n  const [o, setO] = useState(['0', '1']);\n  const items = cityList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(CityCard, {\n      data: [item.city, item.temp]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 27\n    }, this)\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this));\n  const addCity = async function () {\n    getWeather('yeles');\n  };\n  const getWeather = async function (c) {\n    // Prevent the browser from reloading the page\n    let dat = await checkWeather(c);\n    console.log(dat.main.temp);\n    setCityList([...cityList, {\n      city: 'Madrid',\n      temp: dat.main.temp.toFixed(0),\n      id: currentId\n    }]);\n    setCurrentId(currentId + 1);\n    console.log(currentId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row citiesList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCity,\n        children: \" 000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CitiesList, \"eNBLP0mdmNZW5cy+jHv+tlYtsdI=\");\n_c = CitiesList;\nvar _c;\n$RefreshReg$(_c, \"CitiesList\");","map":{"version":3,"names":["React","useState","useEffect","checkWeather","CityCard","jsxDEV","_jsxDEV","CitiesList","props","_s","currentId","setCurrentId","cityList","setCityList","city","temp","id","o","setO","items","map","item","children","data","fileName","_jsxFileName","lineNumber","columnNumber","addCity","getWeather","c","dat","console","log","main","toFixed","className","onClick","_c","$RefreshReg$"],"sources":["/Users/yeronmartin/Desktop/web/src/components/CitiesList.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react';\nimport {checkWeather} from '../js/watherScript'\n\nimport { CityCard } from './CityCard'\n\nexport const CitiesList = (props) => {\n  const [currentId, setCurrentId] = useState(2);\n  const [cityList, setCityList] = useState ([{city: 'Madrid', temp: '38', id:0}, \n  {city: 'London', temp: '11', id:1}]);\n  const [o, setO] = useState(['0', '1'])\n\n  const items = cityList.map((item) =>\n        <li key={item.id}><CityCard data = {[item.city, item.temp]}/></li>\n  )\n\n\n  const addCity =  async function () {\n    getWeather('yeles');\n  }\n\n  const getWeather = async function(c) {\n    // Prevent the browser from reloading the page\n    let dat = await checkWeather(c);\n    console.log(dat.main.temp);\n    setCityList([...cityList, {city: 'Madrid', temp: dat.main.temp.toFixed(0), id: currentId}]);\n    setCurrentId(currentId + 1);\n    console.log(currentId);\n  } \n\n  return (\n    <div className='row citiesList'>\n        <div className='col-12'>\n            <ul>\n               {items}\n            </ul>\n            <button onClick= {addCity}> 000</button>\n        </div>\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAAQC,YAAY,QAAO,oBAAoB;AAE/C,SAASC,QAAQ,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAE,CAAC;IAACa,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE,IAAI;IAAEC,EAAE,EAAC;EAAC,CAAC,EAC7E;IAACF,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE,IAAI;IAAEC,EAAE,EAAC;EAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACC,CAAC,EAAEC,IAAI,CAAC,GAAGjB,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EAEtC,MAAMkB,KAAK,GAAGP,QAAQ,CAACQ,GAAG,CAAEC,IAAI,iBAC1Bf,OAAA;IAAAgB,QAAA,eAAkBhB,OAAA,CAACF,QAAQ;MAACmB,IAAI,EAAI,CAACF,IAAI,CAACP,IAAI,EAAEO,IAAI,CAACN,IAAI;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,GAApDN,IAAI,CAACL,EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiD,CACvE,CAAC;EAGD,MAAMC,OAAO,GAAI,eAAAA,CAAA,EAAkB;IACjCC,UAAU,CAAC,OAAO,CAAC;EACrB,CAAC;EAED,MAAMA,UAAU,GAAG,eAAAA,CAAeC,CAAC,EAAE;IACnC;IACA,IAAIC,GAAG,GAAG,MAAM5B,YAAY,CAAC2B,CAAC,CAAC;IAC/BE,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAACnB,IAAI,CAAC;IAC1BF,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAACE,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAEgB,GAAG,CAACG,IAAI,CAACnB,IAAI,CAACoB,OAAO,CAAC,CAAC,CAAC;MAAEnB,EAAE,EAAEN;IAAS,CAAC,CAAC,CAAC;IAC3FC,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;IAC3BsB,OAAO,CAACC,GAAG,CAACvB,SAAS,CAAC;EACxB,CAAC;EAED,oBACEJ,OAAA;IAAK8B,SAAS,EAAC,gBAAgB;IAAAd,QAAA,eAC3BhB,OAAA;MAAK8B,SAAS,EAAC,QAAQ;MAAAd,QAAA,gBACnBhB,OAAA;QAAAgB,QAAA,EACIH;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACLrB,OAAA;QAAQ+B,OAAO,EAAGT,OAAQ;QAAAN,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAlB,EAAA,CAlCYF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}