{"ast":null,"code":"var apiURL = 'http://localhost:8080';\nexport async function getUsers() {\n  const response = await fetch(apiURL + '/users', {\n    method: 'GET'\n  }).then(response => response.json());\n  return response;\n}\nexport async function getUserById(id) {\n  const response = await fetch(apiURL + '/users/' + id, {\n    method: 'GET'\n  }).then(response => response.json());\n  return response;\n}\nexport async function getUserByNick(nick) {\n  const response = await fetch(apiURL + '/users/nick/' + nick, {\n    method: 'GET'\n  }).then(response => response.json());\n  return response;\n}\nexport async function getUserByUserName(userName) {\n  const response = await fetch(apiURL + '/user/nick/' + userName, {\n    method: 'GET'\n  }).then(response => response.json());\n  return response;\n}\nexport async function getChatsByUserId(id) {\n  const response = await fetch(apiURL + '/user/' + id + '/chats', {\n    method: 'GET'\n  }).then(response => response.json());\n  return response;\n}\nexport async function postUser(user) {\n  const response = await fetch(apiURL + '/users', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"userName\": \"Manolo\",\n      \"nick\": \"MeLaSudaSoyManolo\",\n      \"email\": \"manolo@gmail.com\"\n    })\n  }).then(response => response.json());\n  return response;\n}\nexport async function putUserUserName(id, userName) {\n  const response = await fetch(apiURL + '/users/' + id + '/userName', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: userName\n  }).then(response => response.json());\n  return response;\n}\nexport async function putUserNick(id, nick) {\n  const response = await fetch(apiURL + '/users/' + id + '/nick', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: nick\n  }).then(response => response.json());\n  return response;\n}\nexport async function putUserEmail(id, email) {\n  const response = await fetch(apiURL + '/users/' + id + '/email', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: email\n  }).then(response => response.json());\n  return response;\n}\nconsole.log(await putUserNick(4, \"Manolo\"));","map":{"version":3,"names":["apiURL","getUsers","response","fetch","method","then","json","getUserById","id","getUserByNick","nick","getUserByUserName","userName","getChatsByUserId","postUser","user","headers","body","JSON","stringify","putUserUserName","putUserNick","putUserEmail","email","console","log"],"sources":["/Users/yeronmartin/Desktop/web/src/js/MediaApp/mediaScript.js"],"sourcesContent":["var apiURL = 'http://localhost:8080';\n\nexport async function getUsers (){\n    const response = await fetch(apiURL+'/users', {\n        method: 'GET'\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function getUserById (id){\n    const response = await fetch(apiURL+'/users/'+id, {\n        method: 'GET'\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function getUserByNick (nick){\n    const response = await fetch(apiURL+'/users/nick/'+nick,  {\n        method: 'GET'\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function getUserByUserName (userName){\n    const response = await fetch(apiURL+'/user/nick/'+userName,  {\n        method: 'GET'\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function getChatsByUserId (id){\n    const response = await fetch(apiURL+'/user/'+id+'/chats', {\n        method: 'GET'\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function postUser (user){\n    const response = await fetch(apiURL+'/users', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n            {\n                \"userName\": \"Manolo\",\n                \"nick\": \"MeLaSudaSoyManolo\",\n                \"email\": \"manolo@gmail.com\"\n            }\n        )\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function putUserUserName (id, userName){\n    const response = await fetch(apiURL+'/users/'+id+'/userName', {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: userName\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function putUserNick (id, nick){\n    const response = await fetch(apiURL+'/users/'+id+'/nick', {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: nick\n    }).then(response => response.json());\n    return response;\n}\n\nexport async function putUserEmail (id, email){\n    const response = await fetch(apiURL+'/users/'+id+'/email', {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: email\n    }).then(response => response.json());\n    return response;\n}\n\n\n\n\n\nconsole.log(await putUserNick(4, \"Manolo\"));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}