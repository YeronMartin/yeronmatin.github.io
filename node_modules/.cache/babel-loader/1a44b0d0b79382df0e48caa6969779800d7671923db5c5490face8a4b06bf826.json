{"ast":null,"code":"var _jsxFileName = \"/Users/yeronmartin/Desktop/web/src/components/CitiesList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { useState, useEffect } from 'react';\nimport { checkWeather, getTemp } from '../js/watherScript';\nimport { capitalizeFirstLetter } from '../js/variables';\nimport { CityCard } from './CityCard';\nimport { AppManagerContext } from '../js/weatherAppManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CitiesList = props => {\n  _s();\n  const [currentId, setCurrentId] = useState(2);\n  const {\n    inputText\n  } = useContext(AppManagerContext);\n  const {\n    setInputText\n  } = useContext(AppManagerContext);\n  const {\n    setSelectedCity\n  } = useContext(AppManagerContext);\n  const {\n    selectedCity\n  } = useContext(AppManagerContext);\n  const onClick = function (city) {\n    setSelectedCity(city);\n  };\n  const [cityList, setCityList] = useState([{\n    city: '',\n    temp: 0,\n    id: 0\n  }, {\n    city: '',\n    temp: 0,\n    id: 1\n  }]);\n  const [cityNames, setCityNames] = useState(['Madrid', 'London']);\n  const items = cityList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: () => onClick(item.city),\n    children: /*#__PURE__*/_jsxDEV(CityCard, {\n      data: [item.city, item.temp],\n      delay: item.id * 0.2 + 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 62\n    }, this)\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this));\n\n  /*\n    This use effect check if theinputText's value has changed \n    to != ''. This useEffect add a new city to the cityList;\n   */\n  useEffect(() => {\n    if (inputText != '') {\n      addCityWrapper();\n    }\n  }, [selectedCity]);\n\n  /*\n    When cciityNames' value changes it refresh\n   */\n  useEffect(() => {\n    refreshWeather();\n  }, [cityNames]);\n\n  /*\n    This method wraps the addCity async method\n  */\n  const addCityWrapper = async function () {\n    addCity(inputText);\n  };\n\n  /*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */\n  const addCity = async function (c) {\n    let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)) {\n      setCityList([...cityList, {\n        city: str,\n        temp: data.main.temp.toFixed(0),\n        id: currentId\n      }]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n    }\n  };\n\n  /*\n    This meethod refresh all the city data\n   */\n  const refreshWeather = async function () {\n    setCityList([]);\n    let arr = [];\n    for (let i = 0; i < cityNames.length; i++) {\n      var data = await checkWeather(cityNames[i]);\n      ;\n      arr.push({\n        city: data.name,\n        temp: data.main.temp.toFixed(0),\n        id: i\n      });\n    }\n    setCityList([...arr]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row citiesList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(CitiesList, \"Y62xJLB18xBeA+JIS+8Zjq3Ce1A=\");\n_c = CitiesList;\nvar _c;\n$RefreshReg$(_c, \"CitiesList\");","map":{"version":3,"names":["React","useContext","useState","useEffect","checkWeather","getTemp","capitalizeFirstLetter","CityCard","AppManagerContext","jsxDEV","_jsxDEV","CitiesList","props","_s","currentId","setCurrentId","inputText","setInputText","setSelectedCity","selectedCity","onClick","city","cityList","setCityList","temp","id","cityNames","setCityNames","items","map","item","children","data","delay","fileName","_jsxFileName","lineNumber","columnNumber","addCityWrapper","refreshWeather","addCity","c","str","toLowerCase","hasOwnProperty","includes","main","toFixed","arr","i","length","push","name","className","_c","$RefreshReg$"],"sources":["/Users/yeronmartin/Desktop/web/src/components/CitiesList.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { useState, useEffect} from 'react';\nimport {checkWeather, getTemp} from '../js/watherScript'\nimport { capitalizeFirstLetter } from '../js/variables';\n\nimport { CityCard } from './CityCard'\nimport { AppManagerContext } from '../js/weatherAppManager';\n\nexport const CitiesList = (props) => {\n  const [currentId, setCurrentId] = useState(2);\n  const {inputText} = useContext(AppManagerContext);\n  const {setInputText} = useContext (AppManagerContext);\n  const {setSelectedCity} = useContext (AppManagerContext);\n  const {selectedCity} = useContext (AppManagerContext);\n\n\n  const onClick = function (city) {  \n    setSelectedCity(city)\n  }\n\n  const [cityList, setCityList] = useState ([{city: '', temp: 0, id:0}, \n  {city: '', temp: 0, id:1}]);\n  const [cityNames, setCityNames] = useState(['Madrid', 'London']);\n  const items = cityList.map((item) =>\n        <li key={item.id} onClick={() => onClick(item.city)}><CityCard data = {[item.city, item.temp]} delay = {item.id * 0.2 +0.2}/></li>\n  );\n\n  /*\n    This use effect check if theinputText's value has changed \n    to != ''. This useEffect add a new city to the cityList;\n\n  */\n  useEffect(() => {\n    if (inputText != ''){\n      addCityWrapper();\n    }\n  }, [selectedCity]);\n\n  /*\n    When cciityNames' value changes it refresh\n   */\n  useEffect(() => {\n     refreshWeather();\n  }, [cityNames]);\n\n  /*\n    This method wraps the addCity async method\n  */\n  const addCityWrapper =  async function () {\n    addCity(inputText);\n  }\n\n  /*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */\n  const addCity = async function(c) {\n\n    let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    \n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)){\n      setCityList([...cityList, {city: str, temp: data.main.temp.toFixed(0), id: currentId}]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n\n    }\n  } \n\n  /*\n    This meethod refresh all the city data\n   */\n  const refreshWeather = async function() {\n    setCityList([]);\n    let arr = []\n    for (let i = 0; i< cityNames.length; i++){\n      var data = (await checkWeather(cityNames[i]));;\n      arr.push({city: data.name, temp: data.main.temp.toFixed(0), id:i});\n    }\n    setCityList([...arr]);\n  } \n\n\n  return (\n    <div className='row citiesList'>\n        <div className='col-12'>\n            <ul>\n               {items}\n            </ul>\n        </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}