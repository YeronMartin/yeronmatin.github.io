{"ast":null,"code":"var _jsxFileName = \"/Users/yeronmartin/Desktop/web/src/components/CitiesList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { useState, useEffect } from 'react';\nimport { checkWeather, getTemp } from '../js/watherScript';\nimport { capitalizeFirstLetter } from '../js/variables';\nimport { CityCard } from './CityCard';\nimport { AppManagerContext } from '../js/weatherAppManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CitiesList = () => {\n  _s();\n  const {\n    currentId\n  } = useContext(AppManagerContext);\n  const {\n    setCity_OnClick\n  } = useContext(AppManagerContext);\n  const {\n    cityList\n  } = useContext(AppManagerContext);\n  const {\n    cityNames\n  } = useContext(AppManagerContext);\n  const items = cityList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: () => setCity_OnClick(item.city),\n    children: /*#__PURE__*/_jsxDEV(CityCard, {\n      data: [item.city, item.temp]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 70\n    }, this)\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this));\n\n  /*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */\n  /*const addCity = async function(c) {\n     let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    \n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)){\n      setCityList([...cityList, {city: str, temp: data.main.temp.toFixed(0), id: currentId}]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n     }\n  } */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row citiesList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(CitiesList, \"f906WjtCprvyLF5kQpyQexEKEqc=\");\n_c = CitiesList;\nvar _c;\n$RefreshReg$(_c, \"CitiesList\");","map":{"version":3,"names":["React","useContext","useState","useEffect","checkWeather","getTemp","capitalizeFirstLetter","CityCard","AppManagerContext","jsxDEV","_jsxDEV","CitiesList","_s","currentId","setCity_OnClick","cityList","cityNames","items","map","item","onClick","city","children","data","temp","fileName","_jsxFileName","lineNumber","columnNumber","id","className","_c","$RefreshReg$"],"sources":["/Users/yeronmartin/Desktop/web/src/components/CitiesList.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { useState, useEffect} from 'react';\nimport {checkWeather, getTemp} from '../js/watherScript'\nimport { capitalizeFirstLetter } from '../js/variables';\n\nimport { CityCard } from './CityCard'\nimport { AppManagerContext } from '../js/weatherAppManager';\n\nexport const CitiesList = () => {\n\n  const {currentId} = useContext(AppManagerContext);\n  const {setCity_OnClick} = useContext(AppManagerContext);\n  const {cityList} = useContext(AppManagerContext);\n  const {cityNames} = useContext(AppManagerContext);\n\n  const items = cityList.map((item) =>\n        <li key={item.id} onClick={() => setCity_OnClick(item.city)}><CityCard data = {[item.city, item.temp]}/></li>\n  );\n\n  \n  \n\n  /*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */\n  /*const addCity = async function(c) {\n\n    let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    \n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)){\n      setCityList([...cityList, {city: str, temp: data.main.temp.toFixed(0), id: currentId}]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n\n    }\n  } */\n\n  \n\n\n  return (\n    <div className='row citiesList'>\n        <div className='col-12'>\n            <ul>\n               {items}\n            </ul>\n        </div>\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAC1C,SAAQC,YAAY,EAAEC,OAAO,QAAO,oBAAoB;AACxD,SAASC,qBAAqB,QAAQ,iBAAiB;AAEvD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,iBAAiB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE9B,MAAM;IAACC;EAAS,CAAC,GAAGZ,UAAU,CAACO,iBAAiB,CAAC;EACjD,MAAM;IAACM;EAAe,CAAC,GAAGb,UAAU,CAACO,iBAAiB,CAAC;EACvD,MAAM;IAACO;EAAQ,CAAC,GAAGd,UAAU,CAACO,iBAAiB,CAAC;EAChD,MAAM;IAACQ;EAAS,CAAC,GAAGf,UAAU,CAACO,iBAAiB,CAAC;EAEjD,MAAMS,KAAK,GAAGF,QAAQ,CAACG,GAAG,CAAEC,IAAI,iBAC1BT,OAAA;IAAkBU,OAAO,EAAEA,CAAA,KAAMN,eAAe,CAACK,IAAI,CAACE,IAAI,CAAE;IAAAC,QAAA,eAACZ,OAAA,CAACH,QAAQ;MAACgB,IAAI,EAAI,CAACJ,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACK,IAAI;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,GAA/FT,IAAI,CAACU,EAAE;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA4F,CAClH,CAAC;;EAKD;AACF;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAOE,oBACElB,OAAA;IAAKoB,SAAS,EAAC,gBAAgB;IAAAR,QAAA,eAC3BZ,OAAA;MAAKoB,SAAS,EAAC,QAAQ;MAAAR,QAAA,eACnBZ,OAAA;QAAAY,QAAA,EACIL;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAhB,EAAA,CA5CYD,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}