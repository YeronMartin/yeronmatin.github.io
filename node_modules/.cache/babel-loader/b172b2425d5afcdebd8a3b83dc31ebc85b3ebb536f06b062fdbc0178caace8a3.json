{"ast":null,"code":"import React,{useContext}from'react';import{CityCard}from'./CityCard';import{AppManagerContext}from'../../js/WeatherApp/weatherAppManager';import{jsx as _jsx}from\"react/jsx-runtime\";export var CitiesList=function CitiesList(){var _useContext=useContext(AppManagerContext),currentId=_useContext.currentId;var _useContext2=useContext(AppManagerContext),setCity_OnClick=_useContext2.setCity_OnClick;var _useContext3=useContext(AppManagerContext),cityList=_useContext3.cityList;var _useContext4=useContext(AppManagerContext),cityNames=_useContext4.cityNames;var items=cityList.map(function(item){return/*#__PURE__*/_jsx(\"li\",{onClick:function onClick(){return setCity_OnClick(item.city);},children:/*#__PURE__*/_jsx(CityCard,{data:[item.city,item.temp]})},item.id);});/*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */ /*const addCity = async function(c) {\n\n    let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    \n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)){\n      setCityList([...cityList, {city: str, temp: data.main.temp.toFixed(0), id: currentId}]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n\n    }\n  } */return/*#__PURE__*/_jsx(\"div\",{className:\"row citiesList\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-12\",children:/*#__PURE__*/_jsx(\"ul\",{children:items})})});};","map":{"version":3,"names":["React","useContext","CityCard","AppManagerContext","jsx","_jsx","CitiesList","_useContext","currentId","_useContext2","setCity_OnClick","_useContext3","cityList","_useContext4","cityNames","items","map","item","onClick","city","children","data","temp","id","className"],"sources":["/Users/yeronmartin/Desktop/yeronmatin.github.io/src/components/WeatherApp/CitiesList.js"],"sourcesContent":["import React, { useContext } from 'react'\n\nimport { CityCard } from './CityCard'\nimport { AppManagerContext } from '../../js/WeatherApp/weatherAppManager';\n\n\nexport const CitiesList = () => {\n\n  const {currentId} = useContext(AppManagerContext);\n  const {setCity_OnClick} = useContext(AppManagerContext);\n  const {cityList} = useContext(AppManagerContext);\n  const {cityNames} = useContext(AppManagerContext);\n\n  const items = cityList.map((item) =>\n        <li key={item.id} onClick={() => setCity_OnClick(item.city)}><CityCard data = {[item.city, item.temp]}/></li>\n  );\n\n  \n  \n\n  /*\n    AddCity method get a string (a city name) and get all the data \n    related to that city. Then iitt checks if the ciity has already \n    been added to the cityList and cityNames, if not it will add it\n  */\n  /*const addCity = async function(c) {\n\n    let data = await checkWeather(c);\n    const str = capitalizeFirstLetter(c.toLowerCase());\n    \n    if (data.hasOwnProperty('weather') && !cityNames.includes(str)){\n      setCityList([...cityList, {city: str, temp: data.main.temp.toFixed(0), id: currentId}]);\n      setCurrentId(currentId + 1);\n      setCityNames([...cityNames, str]);\n\n    }\n  } */\n\n  \n\n\n  return (\n    <div className='row citiesList'>\n        <div className='col-12'>\n            <ul>\n               {items}\n            </ul>\n        </div>\n    </div>\n  )\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CAEzC,OAASC,QAAQ,KAAQ,YAAY,CACrC,OAASC,iBAAiB,KAAQ,uCAAuC,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAG1E,MAAO,IAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAA,CAAS,CAE9B,IAAAC,WAAA,CAAoBN,UAAU,CAACE,iBAAiB,CAAC,CAA1CK,SAAS,CAAAD,WAAA,CAATC,SAAS,CAChB,IAAAC,YAAA,CAA0BR,UAAU,CAACE,iBAAiB,CAAC,CAAhDO,eAAe,CAAAD,YAAA,CAAfC,eAAe,CACtB,IAAAC,YAAA,CAAmBV,UAAU,CAACE,iBAAiB,CAAC,CAAzCS,QAAQ,CAAAD,YAAA,CAARC,QAAQ,CACf,IAAAC,YAAA,CAAoBZ,UAAU,CAACE,iBAAiB,CAAC,CAA1CW,SAAS,CAAAD,YAAA,CAATC,SAAS,CAEhB,GAAM,CAAAC,KAAK,CAAGH,QAAQ,CAACI,GAAG,CAAC,SAACC,IAAI,qBAC1BZ,IAAA,OAAkBa,OAAO,CAAE,SAAAA,QAAA,QAAM,CAAAR,eAAe,CAACO,IAAI,CAACE,IAAI,CAAC,EAAC,CAAAC,QAAA,cAACf,IAAA,CAACH,QAAQ,EAACmB,IAAI,CAAI,CAACJ,IAAI,CAACE,IAAI,CAAEF,IAAI,CAACK,IAAI,CAAE,CAAC,CAAC,EAA/FL,IAAI,CAACM,EAA8F,CAAC,EACnH,CAAC,CAKD;AACF;AACA;AACA;AACA,IAJE,CAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAKE,mBACElB,IAAA,QAAKmB,SAAS,CAAC,gBAAgB,CAAAJ,QAAA,cAC3Bf,IAAA,QAAKmB,SAAS,CAAC,QAAQ,CAAAJ,QAAA,cACnBf,IAAA,OAAAe,QAAA,CACIL,KAAK,CACL,CAAC,CACJ,CAAC,CACL,CAAC,CAEV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}